# Flags for shared library
TARGET= -Dlinux  # riscos MOTO_CPU32 
SHFLAGS = -fPIC
OPTFLAGS=-g -Wl,--no-as-needed

LIBM    = -lm -lstdc++
# MFLAGS  = -DFICL_USE_FDLIBM -Ifdlibm53 -DFICL_USE_STRTOD
# 
# The ATH flag enable additions done by me (Andrew T Holt)
# The ATH_OBJECTS adds the C++ add ons I have written too.
# If ATH is not define none of my stuff is addded.
#
# MFLAGS = -DATH -DATH_OBJECTS
# LIBM    = fdlibm53/libfdm.a
# DTOAO   = dtoa.o

ALL=ficll
ifdef ATH
MFLAGS +=-DATH
ifdef ATH_OBJECTS
MFLAGS +=-DATH_OBJECTS
XOBJECTS=athExtras.o smallest.o
ALL = ficl++
endif
endif

CFLAGS= $(OPTFLAGS) -c $(SHFLAGS) $(TARGET) $(MFLAGS)
CPFLAGS= $(OPTFLAGS) -c $(SHFLAGS) $(TARGET) $(MFLAGS)
CC=gcc
CPP=g++
LIB = ar cr
RANLIB = ranlib
STATIC = 


OBJECTS= dictionary.o system.o fileaccess.o float.o double.o prefix.o search.o softcore.o stack.o tools.o vm.o primitives.o bit.o lzuncompress.o unix.o utility.o hash.o callback.o word.o curterm.o extras.o bswap.o ficlblas.o mt19937ar.o mt19937-64.o $(DTOAO) # athExtras.o smallest.o

HEADERS= ficlplatform.h ficl.h ficlplatform/unix.h

MAJOR = 4
MINOR = 2.0

all:	$(ALL)

help:
	@echo "Help"
	@echo "\tJust make builds the default versionwith none of my extentions."
	@echo "\tmake ATH=1 builds the general tools added to extras.c"
	@echo "\tmake ATH=1 ATH_OBJECTS Build as above plus any C++ add ons."
	@echo ""
	@echo "Note:"
	@echo "\tIf you change the options do a clean."

ficll: $(HEADERS) softcore.c main.o libficl.a
	echo $(ALL)
	$(CC) $(OPT) $(STATIC) main.o -o $@ -L. -lficl -lpthread -ldl $(LIBM)

ficl++: $(HEADERS) softcore.c main.o libficl.a $(XOBJECTS) # smallest.o athExtras.o
	$(CC) $(OPT) $(STATIC) main.o $(XOBJECTS) -o $@ -L. -lficl -lpthread -ldl $(LIBM)

lib: libficl.so.$(MAJOR).$(MINOR)

smallest.o: smallest.cpp smallest.h
	$(CPP) $(CPFLAGS) -c smallest.cpp -o smallest.o

athExtras.o: athExtras.cpp athExtras.h
	$(CPP) $(CPFLAGS) -c athExtras.cpp -o athExtras.o

# static library build
libficl.a: $(OBJECTS)
	$(LIB) libficl.a $(OBJECTS)
	$(RANLIB) libficl.a

# shared library build
libficl.so.$(MAJOR).$(MINOR): $(OBJECTS)
	$(CC) -shared -Wl,-soname,libficl.so.$(MAJOR).$(MINOR) \
	-o libficl.so.$(MAJOR).$(MINOR) $(OBJECTS)
	ln -sf libficl.so.$(MAJOR).$(MINOR) libficl.so

softcore.c:
	touch softcore/ficl.fr
	cd softcore; $(MAKE)

main: main.o ficl.h sysdep.h libficl.so.$(MAJOR).$(MINOR)
	$(CC) main.o -o main -L. -lficl -ldl $(LIBM)
	ln -sf libficl.so.$(MAJOR).$(MINOR) libficl.so.$(MAJOR)

unix.o: ficlplatform/unix.c $(HEADERS)
	$(CC) $(CFLAGS) -c ficlplatform/unix.c

ficlplatform.h: Makefile
	$(RM) $@
	echo "#define FICL_PLATFORM_OS \"`uname`\"" >>$@
	echo "#define FICL_PLATFORM_ARCHITECTURE \"`uname -m`\"" >>$@

#
#       generic object code
#
.SUFFIXES: .cpp .cxx .cc .c .o

.c.o:
	$(CC) $(CFLAGS) -c $*.c

.cxx.o:
	$(CPP) $(CPFLAGS) -c $*.cxx

.cc.o:
	$(CPP) $(CPFLAGS) -c $*.cc
#
#       generic cleanup code
#
clean:
	$(RM) *.o *.a libficl.*
	$(RM) ficlplatform.h
	$(RM) softcore.c
	$(RM) -f cscope.out

clobber: clean
	$(RM) -f ficll ficl++

